---
title: "synteny"
author: "Glebus Alexandr"
date: "`r Sys.Date()`"
output: "html"
---

# Исследовние синтении Cobetia spp

```{r}
knitr::opts_chunk$set(echo = FALSE, tidy = TRUE)
library(GenomicFeatures)
library(dplyr)
library(tidyverse)
library(ggbio)
library(GenomicRanges)
library(Gviz)
library(rtracklayer)
library(plotly)
```

## 1. phoD

Используем файл [ALP_blast.xlsx](https://github.com/glebus-sasha/VL/blob/main/reports/ALP_blast.xlsx) из предыдущей работы. Исследуем гомологи phoD.

Выберем штамм: Cobetia_amphilecti_KMM_296,

у него гомолог phoD: WP_052384691.1

Посмотрим, какие гомологи phoD есть в штамме Cobetia_amphilecti_KMM_296.

```{r}
file <- ".././data/GTF_files/14.Cobetia_amphilecti_KMM_296_GCF_000754225.1.gtf"

# Чтение GTF-файла
gtf <- rtracklayer::readGFF(file)

# Найти координаты гомолога по protein_id
gtf %>%
  filter(product == "alkaline phosphatase D family protein") %>% 
  select(type, start, end, protein_id, product, gene)
```

```{r}
gtf %>%
  filter(start > 4000, start < 5000, !is.na(gene)) %>% 
  select(type, start, end, protein_id, gene, gene_id) %>% view()
```

Есть 2 гомолога, нам нужен именно WP_052384691.1

```{r}
# Найти координаты гомолога по protein_id
gtf %>%
  filter(protein_id == "WP_052384691.1") %>% 
  select(type, start, end, protein_id, product, gene, gene_id)
```

Координаты: 4093 - 6267, protein_id: WP_043333989.1, gene_id: KP05_RS10430

Теперь посмотрим окрестности этого гомолога, чтобы найти именованный ген. Для этого добавим новую строку с предполагаемым геном и построим график.

```{r}
target_gene_name <- "probably_phoD" # Введите соответствующее имя
protein_id <- "WP_043333989.1" # Введите соответствующий gene_id
gene_id <- "KP05_RS10430" # Введите соответствующий protein_id
gene_start <- 4093 # Введите соответствующий start для target gene
gene_end <- 6267 # Введите соответствующий end для target gene

# Создаем новую строку
target_gene_raw <- tibble(
  type = "gene",  
  start = gene_start,
  end = gene_end,
  protein_id = protein_id,  
  gene = target_gene_name,
  gene_id = gene_id
)

# Создаем график
gtf %>%
  filter(start > 4000, start < 6000, !is.na(gene), type == "CDS") %>% 
  select(type, start, end, protein_id, gene, gene_id) %>% 
  bind_rows(target_gene_raw) %>% 
  arrange(start) %>% 
  ggplot(aes(x = start, xend = end, y = gene, yend = gene)) +
  geom_segment() +
  geom_point(aes(color = gene)) +
  geom_point(data = filter(bind_rows(target_gene_raw), gene == target_gene_name), aes(x = start, y = gene), color = "red", size = 3) + # выделение точкой
  geom_segment(data = filter(bind_rows(target_gene_raw), gene == target_gene_name), aes(x = start, xend = end, y = gene, yend = gene), color = "red", size = 2) + # выделение сегмента
  labs(x = "Start", y = "Gene", title = "Gene Segments") +
  theme_minimal()
```

Теперь сделаем всё это для всех phoD
Создадим датафрейм, содержащий наши гомологи phoD

```{r}
# target gene
target_gene_name <- "modA"
target_product <- "alkaline phosphatase D family protein"
sidestep <- 1000000

# Указать папку с файлами GTF
gtf_folder <- ".././data/GTF_files/"

# Получить список файлов GTF в папке
gtf_files <- list.files(path = gtf_folder, pattern = "\\.gtf$", full.names = TRUE)

# Создать пустой список для хранения результатов
result_list <- list()

# Цикл по каждому файлу GTF
for (gtf_file in gtf_files) {
  # Извлечь название штамма из имени файла
  strain_name <- tools::file_path_sans_ext(basename(gtf_file))
  
  # Загрузка GTF файла
  gtf_data <- rtracklayer::readGFF(gtf_file)
  
  # Находим гены в окрестности target_gene_name
  target_region <- gtf_data %>%
    filter(type == "CDS" & gene == target_gene_name) %>%
    mutate(start_target = start, end_target = end)
  
  # Определяем окрестность sidestep оснований в каждую сторону от target
  flanking_region <- target_region %>%
    mutate(start_flanking = start_target - sidestep, end_flanking = end_target + sidestep)
  
  # Фильтруем данные для генов в определенной окрестности
  genes_in_flanking_region <- gtf_data %>%
    filter(type == "CDS" & 
             end >= flanking_region$start_flanking & start <= flanking_region$end_flanking)
  
  # Проверяем, не является ли набор данных пустым
  if (nrow(genes_in_flanking_region) > 0) {
    # Отбираем гены с продуктом target_product
    target_genes <- genes_in_flanking_region %>%
      filter(product == target_product)
    
    # Добавляем результат к списку, включая название файла
    result_list[[strain_name]] <- target_genes %>%
      mutate(filename = gtf_file)
  } else {
    # Добавляем сообщение к списку, включая название файла
    result_list[[strain_name]] <- data.frame(message = "Гены в окрестности target_gene_name не найдены.", filename = gtf_file)
  }
}

# Соединяем все результаты в одну таблицу (если необходимо)
final_result <- bind_rows(result_list, .id = "strain")

final_result %>%
      select(strain, start, end, gene_id, protein_id)

```
Найдем уникальные длины гомологов и длину самого часто встречающегося гомолога phoD из окрестности modA.

```{r}
# Добавим столбец длины гена
final_result <- final_result %>% 
  mutate(length = end - start)

length_distr <- final_result %>%
  group_by(length) %>%
  mutate(count = n()) %>% 
  select(length, count, protein_id) %>% 
  arrange(desc(count), desc(length)) %>%
  distinct()

length_distr %>% 
  ungroup() %>% 
  select(protein_id) %>% view()
```
Полученный список можно использовать для мультивыравнивания [Cobalt](https://www.ncbi.nlm.nih.gov/tools/cobalt/cobalt.cgi)
```{r}
length_distr %>% 
  ggplot() +
  aes(x = length, y = count, fill = factor(count)) + 
  geom_bar(stat = "identity", position = "dodge") + 
  geom_text(aes(label = protein_id), vjust = -0.5, size = 3, check_overlap = TRUE) +
  ggtitle("Distribution of Lengths") +
  theme_minimal() + 
  coord_flip()
```

```{r}
# Функция нахождения моды
find_mode <- function (x) {
 u <- unique(x)
 tab <- tabulate(match(x, u))
 u[tab == max(tab)]
}

# найдем самую распространенныю длину гомолога
mod_length <- final_result %>% 
  pull(length) %>% 
  find_mode()
cat("mod_length:", mod_length)
```
Построим график геномной окрестности гомологов phoD, центрируя по гомологу. Рамкой обозначим границы самого встречающегося гомолога. window_size можно регулировать.
```{r}
# Получение списка файлов GTF в папке
gtf_files <- final_result$filename
window_size <- 20000

# Функция для центрирования координат относительно указанного гена
center_coordinates <- function(gtf_data, center_gene, window_size) {
  center_gene_coords <- gtf_data %>%
    filter(type == "CDS", gene_id == center_gene) %>%
    dplyr::select(seqid, center_start = start, center_end = end)
  
  centered_data <- gtf_data %>%
    filter(type == "CDS",
           seqid %in% center_gene_coords$seqid) %>%
    mutate(centered_start = start - center_gene_coords$center_start,
           centered_end = end - center_gene_coords$center_start,
           direction = if_else(centered_start < centered_end, "->", "<-")) %>%
    filter(centered_end >= -window_size, centered_start <= window_size) %>%
    dplyr::select(gene, product, centered_start, centered_end, direction)
  
  return(centered_data)
}

# Считывание и центрирование данных
center_gene_list <- final_result$gene_id

centered_genes_list <- lapply(seq_along(gtf_files), function(i) {
  file <- gtf_files[i]
  center_gene <- center_gene_list[i]
  
  gtf <- rtracklayer::readGFF(file)
  centered_genes <- center_coordinates(gtf, center_gene, window_size)
  return(centered_genes)
})

# Объединение данных из всех файлов
all_centered_genes <- bind_rows(centered_genes_list, .id = "file_id")

# Изменение лейблов по вертикали
gtf_files_labels <- gsub("\\d+\\.", "", gsub("_GCF_.*", "", basename(gtf_files)))

# Создание графика
p <- ggplot() +
  geom_rect(data = all_centered_genes,
            aes(xmin = centered_start, xmax = centered_end, ymin = as.numeric(file_id) - 0.4, ymax = as.numeric(file_id) + 0.4, fill = gene),
            alpha = 1) +
  scale_y_continuous(breaks = seq_along(gtf_files), labels = gtf_files_labels) +
  theme_minimal() +
  geom_vline(xintercept = 0, color = "blue", linetype = "solid") +
  geom_vline(xintercept = mod_length, color = "blue", linetype = "solid") +
  ggtitle(label = paste("\t\tSynteny phoD\n", "window_size = ", window_size)) 

# Вывод графика
p
```

Интерактивный график
```{r}
window_size <- 50000

# Считывание и центрирование данных
center_gene_list <- final_result$gene_id

centered_genes_list <- lapply(seq_along(gtf_files), function(i) {
  file <- gtf_files[i]
  center_gene <- center_gene_list[i]
  
  gtf <- rtracklayer::readGFF(file)
  centered_genes <- center_coordinates(gtf, center_gene, window_size)
  return(centered_genes)
})
# Создание графика
p <- ggplot() +
  geom_rect(data = all_centered_genes,
            aes(xmin = centered_start, xmax = centered_end, ymin = as.numeric(file_id) - 0.4, ymax = as.numeric(file_id) + 0.4, fill = gene),
            alpha = 1) +
  scale_y_continuous(breaks = seq_along(gtf_files), labels = gtf_files_labels) +
  theme_minimal() +
  geom_vline(xintercept = 0, color = "blue", linetype = "solid") +
  geom_vline(xintercept = mod_length, color = "blue", linetype = "solid") +
  ggtitle(label = paste("\t\tSynteny phoD\n", "window_size = ", window_size)) 

# Преобразование в интерактивный график
p <- ggplotly(p)

# Вывод графика
p
```

